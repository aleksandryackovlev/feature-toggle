openapi: 3.0.0
info:
  title: Feature toggle server
  description: API for manging feature toggles
  version: 0.1.0
  contact: {}
tags:
  - name: Applications
    description: Methods for managing applications
  - name: Features
    description: Methods for managing features
  - name: Users
    description: Methods for managing users
servers:
  - url: 'http://localhost:3000'
    description: development server
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        username:
          type: string
          description: The username of the user
          x-faker: internet.username
        isActive:
          type: boolean
          description: Is user active
      required:
        - id
        - createdAt
        - updatedAt
        - username
        - isActive
    UserSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
      required:
        - data
    UsersListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of users
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - total
        - data
    CreateUserDto:
      type: object
      properties:
        username:
          type: string
          example: username
          description: The username of a new user
        password:
          type: string
          example: somePassword
          description: The password of a new user
      required:
        - username
        - password
    UpdateUserDto:
      type: object
      properties:
        password:
          type: string
          example: somePassword
          description: User password
      required:
        - password
    Feature:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the feature
          x-faker: git.branch
        description:
          type: string
          description: The description of the feature
          x-faker: hacker.phrase
        applicationId:
          type: string
          description: The id of the application the feature belongs to
          x-faker: random.uuid
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - applicationId
    FeaturesListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of features
          type: array
          items:
            $ref: '#/components/schemas/Feature'
      required:
        - total
        - data
    CreateFeatureDto:
      type: object
      properties:
        name:
          type: string
          example: Feature name
          description: The name of a new feature
        description:
          type: string
          example: Feature description
          description: The description of a new feature
      required:
        - name
        - description
    FeatureSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Feature'
      required:
        - data
    UpdateFeatureDto:
      type: object
      properties:
        description:
          type: string
          example: Feature description
          description: The description of the feature
      required:
        - description
    Application:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the application
          x-faker: git.branch
        description:
          type: string
          description: The description of the application
          x-faker: hacker.phrase
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
    ApplicationsListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of applications
          type: array
          items:
            $ref: '#/components/schemas/Application'
      required:
        - total
        - data
    ApplicationSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Application'
      required:
        - data
    CreateApplicationDto:
      type: object
      properties:
        name:
          type: string
          example: Application name
          description: The name of a new application
        description:
          type: string
          example: Application description
          description: The description of a new application
      required:
        - name
        - description
    UpdateApplicationDto:
      type: object
      properties:
        name:
          type: string
          example: Application name
          description: The name of the application
        description:
          type: string
          example: Application description
          description: The description of the application
paths:
  /users/me:
    get:
      operationId: getCurrentUser
      summary: Get current user
      parameters: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
      tags:
        - Users
      security:
        - bearer: []
  /users:
    get:
      operationId: getUsers
      summary: Find users by params
      parameters:
        - name: offset
          required: false
          in: query
          example: 10
          description: The number of items to skip
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          example: Search string
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            enum:
              - id
              - username
              - createdAt
              - updatedAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Invalid search parameters
      tags:
        - Users
      security:
        - bearer: []
    post:
      operationId: createUser
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Users
      security:
        - bearer: []
  '/users/{id}':
    get:
      operationId: getUser
      summary: Get user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
      tags:
        - Users
      security:
        - bearer: []
    put:
      operationId: updateUser
      summary: Update the user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Users
      security:
        - bearer: []
    delete:
      operationId: deleteUser
      summary: Delete the user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid id
      tags:
        - Users
      security:
        - bearer: []
  '/applications/{appId}/features':
    get:
      operationId: getFeatures
      summary: Find features by params
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: offset
          required: false
          in: query
          example: 10
          description: The number of items to skip
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          example: Search string
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            enum:
              - id
              - name
              - createdAt
              - updatedAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found features
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesListResponse'
        '400':
          description: Invalid search parameters
      tags:
        - Features
      security:
        - bearer: []
    post:
      operationId: createFeature
      summary: Create a new feature
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureDto'
      responses:
        '201':
          description: The created feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Features
      security:
        - bearer: []
  '/applications/{appId}/features/{id}':
    get:
      operationId: getFeature
      summary: Get feature by id
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
      tags:
        - Features
      security:
        - bearer: []
    put:
      operationId: updateFeature
      summary: Update the feature
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeatureDto'
      responses:
        '200':
          description: The updated feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Features
      security:
        - bearer: []
    delete:
      operationId: deleteFeature
      summary: Delete the feature
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The deleted feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid id
      tags:
        - Features
      security:
        - bearer: []
  '/applications/{appId}/features/{id}/enable':
    post:
      operationId: enableFeature
      summary: Enable the feature
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The enabled feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid id
      tags:
        - Features
      security:
        - bearer: []
  '/applications/{appId}/features/{id}/disable':
    post:
      operationId: disableFeature
      summary: Disable the feature
      parameters:
        - name: appId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The disabled feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid id
      tags:
        - Features
      security:
        - bearer: []
  /applications:
    get:
      operationId: getApplications
      summary: Find applications by params
      parameters:
        - name: offset
          required: false
          in: query
          example: 10
          description: The number of items to skip
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          example: Search string
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          example: '2020-09-09'
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            enum:
              - id
              - name
              - createdAt
              - updatedAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsListResponse'
        '400':
          description: Invalid search parameters
      tags:
        - Applications
      security:
        - bearer: []
    post:
      operationId: createApplication
      summary: Create a new application
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationDto'
      responses:
        '201':
          description: The created application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Applications
      security:
        - bearer: []
  '/applications/{id}':
    get:
      operationId: getApplication
      summary: Get application by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
      tags:
        - Applications
      security:
        - bearer: []
    put:
      operationId: updateApplication
      summary: Update the application
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationDto'
      responses:
        '200':
          description: The updated application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
      tags:
        - Applications
      security:
        - bearer: []
    delete:
      operationId: removeApplication
      summary: Delete the application
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The deleted application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid id
      tags:
        - Applications
      security:
        - bearer: []
